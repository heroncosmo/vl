<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tour Virtual 360° - Carregando...</title>

    <!-- Meta tags para SEO -->
    <meta name="description" content="Explore este incrível tour virtual 360° interativo">
    <meta name="keywords" content="tour virtual, 360°, imóvel, propriedade, realidade virtual">
    <meta name="author" content="Sistema de Tours Virtuais 360°">
    <meta name="robots" content="index, follow">

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:title" content="Tour Virtual 360°">
    <meta property="og:description" content="Explore este incrível tour virtual 360° interativo">
    <meta property="og:site_name" content="Sistema de Tours Virtuais 360°">
    <meta property="og:locale" content="pt_BR">

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Tour Virtual 360°">
    <meta name="twitter:description" content="Explore este incrível tour virtual 360° interativo">

    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>🏠</text></svg>">

    <!-- Meta tags para SEO e compartilhamento -->
    <meta name="description" content="Explore este incrível tour virtual 360° interativo">
    <meta name="keywords" content="tour virtual, 360°, imóvel, propriedade, realidade virtual">
    <meta name="author" content="Sistema de Tours Virtuais 360°">

    <!-- Open Graph para redes sociais -->
    <meta property="og:type" content="website">
    <meta property="og:title" content="Tour Virtual 360°">
    <meta property="og:description" content="Explore este incrível tour virtual 360° interativo">
    <meta property="og:image" content="">
    <meta property="og:url" content="">
    <meta property="og:site_name" content="Tours Virtuais 360°">

    <!-- Twitter Cards -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Tour Virtual 360°">
    <meta name="twitter:description" content="Explore este incrível tour virtual 360° interativo">
    <meta name="twitter:image" content="">

    <!-- WhatsApp -->
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="630">

    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>🏠</text></svg>">

    <!-- Pannellum CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/pannellum@2.5.6/build/pannellum.css"/>

    <!-- Tema Minimalista -->
    <link rel="stylesheet" href="/shared/minimalist-theme.css">

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #000;
            color: white;
            overflow: hidden;
            position: relative;
        }

        .tour-container {
            position: relative;
            width: 100vw;
            height: 100vh;
        }

        #panorama {
            width: 100%;
            height: 100%;
        }

        /* Loading Screen - Design Minimalista */
        .loading-screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: var(--color-white);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 3000;
            transition: opacity var(--transition-slow);
        }

        .loading-screen::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background:
                radial-gradient(circle at 20% 30%, rgba(183, 149, 11, 0.05) 0%, transparent 30%),
                radial-gradient(circle at 80% 70%, rgba(183, 149, 11, 0.03) 0%, transparent 25%);
            pointer-events: none;
        }

        .loading-logo {
            font-size: var(--text-6xl);
            margin-bottom: var(--space-8);
            animation: pulse 2s infinite;
            position: relative;
            z-index: 2;
        }

        .loading-title {
            font-family: var(--font-display);
            font-size: var(--text-3xl);
            font-weight: var(--font-semibold);
            color: var(--color-black);
            margin-bottom: var(--space-4);
            text-align: center;
            position: relative;
            z-index: 2;
        }

        .loading-subtitle {
            font-family: var(--font-primary);
            font-size: var(--text-lg);
            color: var(--color-gray-600);
            margin-bottom: var(--space-10);
            text-align: center;
            position: relative;
            z-index: 2;
        }

        .loading-spinner {
            width: 60px;
            height: 60px;
            border: 3px solid var(--color-gray-200);
            border-top: 3px solid var(--color-gold);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: var(--space-5);
            position: relative;
            z-index: 2;
        }

        .loading-progress {
            width: 300px;
            height: 4px;
            background: var(--color-gray-200);
            border-radius: var(--radius-full);
            overflow: hidden;
            margin-bottom: var(--space-4);
            position: relative;
            z-index: 2;
        }

        .loading-progress-bar {
            height: 100%;
            background: linear-gradient(90deg, var(--color-gold), var(--color-gold-light));
            width: 0%;
            transition: width var(--transition-normal);
            border-radius: var(--radius-full);
        }

        .loading-text {
            font-family: var(--font-primary);
            font-size: var(--text-sm);
            color: var(--color-gray-500);
            text-align: center;
            position: relative;
            z-index: 2;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }

        /* Error Screen */
        .error-screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            display: none;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 3000;
            text-align: center;
            padding: 40px;
        }

        .error-icon {
            font-size: 80px;
            margin-bottom: 30px;
        }

        .error-title {
            font-size: 32px;
            font-weight: 700;
            margin-bottom: 15px;
        }

        .error-message {
            font-size: 18px;
            opacity: 0.9;
            margin-bottom: 40px;
            line-height: 1.5;
            max-width: 600px;
        }

        .error-actions {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
            justify-content: center;
        }

        .error-btn {
            padding: 15px 30px;
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid white;
            border-radius: 8px;
            color: white;
            text-decoration: none;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .error-btn:hover {
            background: white;
            color: #ee5a24;
        }

        /* Mobile Back Button - Design Minimalista */
        .mobile-back-btn {
            position: absolute;
            top: var(--space-6);
            left: var(--space-6);
            z-index: 2100;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            border: none;
            padding: 12px;
            border-radius: 50%;
            font-size: 18px;
            cursor: pointer;
            transition: all var(--transition-normal);
            backdrop-filter: blur(10px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
            display: none;
            opacity: 0;
            animation: fadeInLeft 1s ease 1.5s forwards;
        }

        .mobile-back-btn:hover {
            background: rgba(0, 0, 0, 0.9);
            transform: scale(1.1);
        }

        /* Mobile WhatsApp Button - Design Minimalista */
        .mobile-whatsapp-btn {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 2100;
            background: #25D366;
            color: white;
            border: none;
            padding: 16px;
            border-radius: 50%;
            font-size: 20px;
            cursor: pointer;
            transition: all var(--transition-normal);
            box-shadow: 0 4px 12px rgba(37, 211, 102, 0.3);
            display: none;
            opacity: 0;
            animation: fadeInUp 1s ease 2s forwards;
        }

        .mobile-whatsapp-btn:hover {
            background: #128C7E;
            transform: scale(1.1);
            box-shadow: 0 6px 16px rgba(37, 211, 102, 0.4);
        }

        .mobile-whatsapp-btn:active {
            transform: scale(0.95);
        }

        /* Tour Controls - Design Minimalista */
        .tour-controls {
            position: absolute;
            top: 20px;
            left: 80px;
            z-index: 2000;
            display: flex;
            gap: var(--space-3);
            opacity: 0;
            animation: fadeInDown 1s ease 2s forwards;
        }

        .control-btn {
            background: rgba(255, 255, 255, 0.95);
            color: var(--color-black);
            border: 1px solid var(--color-gray-200);
            padding: var(--space-3) var(--space-4);
            border-radius: var(--radius-lg);
            font-family: var(--font-primary);
            font-size: var(--text-sm);
            font-weight: var(--font-medium);
            cursor: pointer;
            transition: all var(--transition-normal);
            display: flex;
            align-items: center;
            gap: var(--space-2);
            backdrop-filter: blur(10px);
            box-shadow: var(--shadow-sm);
        }

        .control-btn:hover {
            background: var(--color-white);
            border-color: var(--color-gold);
            transform: translateY(-1px);
            box-shadow: var(--shadow-md);
        }

        .control-btn.active {
            background: var(--color-gold);
            color: var(--color-white);
            border-color: var(--color-gold);
        }

        /* Scene Navigator - Design Minimalista */
        .scene-navigator {
            position: absolute;
            bottom: var(--space-6);
            left: 50%;
            transform: translateX(-50%);
            z-index: 2000;
            display: flex;
            gap: var(--space-3);
            padding: var(--space-4);
            background: rgba(255, 255, 255, 0.95);
            border: 1px solid var(--color-gray-200);
            border-radius: var(--radius-xl);
            backdrop-filter: blur(10px);
            box-shadow: var(--shadow-lg);
            backdrop-filter: blur(10px);
            opacity: 0;
            animation: fadeInUp 1s ease 2.5s forwards;
        }

        .scene-thumb {
            width: 80px;
            height: 40px;
            border-radius: 8px;
            overflow: hidden;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid transparent;
            position: relative;
        }

        .scene-thumb:hover {
            transform: scale(1.1);
            border-color: #007bff;
        }

        .scene-thumb.active {
            border-color: #007bff;
            box-shadow: 0 0 15px rgba(0, 123, 255, 0.5);
        }

        .scene-thumb img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .scene-thumb-label {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
            color: white;
            font-size: 10px;
            padding: 8px 4px 4px;
            text-align: center;
            font-weight: 600;
        }

        /* Property Info Panel */
        .property-info {
            position: absolute;
            top: 20px;
            right: 20px;
            z-index: 2000;
            background: rgba(0, 0, 0, 0.8);
            padding: 20px;
            border-radius: 15px;
            max-width: 350px;
            backdrop-filter: blur(10px);
            opacity: 0;
            animation: fadeInRight 1s ease 1.5s forwards;
        }

        .property-title {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 10px;
            color: white;
        }

        .property-description {
            font-size: 14px;
            color: #ccc;
            line-height: 1.5;
            margin-bottom: 20px;
        }

        .property-specs {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .spec-item {
            text-align: center;
            padding: 10px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
        }

        .spec-icon {
            font-size: 20px;
            margin-bottom: 5px;
        }

        .spec-value {
            font-size: 18px;
            font-weight: 600;
            color: white;
        }

        .spec-label {
            font-size: 11px;
            color: #ccc;
            text-transform: uppercase;
        }

        .property-actions {
            display: flex;
            gap: 10px;
        }

        .action-btn {
            flex: 1;
            padding: 12px;
            background: linear-gradient(135deg, #007bff, #0056b3);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            text-align: center;
        }

        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0, 123, 255, 0.3);
        }

        .action-btn.secondary {
            background: linear-gradient(135deg, #28a745, #218838);
        }

        .action-btn.secondary:hover {
            box-shadow: 0 8px 20px rgba(40, 167, 69, 0.3);
        }

        /* Hotspot Info Modal */
        .hotspot-modal {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 2500;
            background: rgba(0, 0, 0, 0.9);
            padding: 30px;
            border-radius: 15px;
            max-width: 400px;
            width: 90%;
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            display: none;
        }

        .hotspot-modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .hotspot-modal-title {
            font-size: 20px;
            font-weight: 600;
            color: white;
        }

        .hotspot-modal-close {
            background: none;
            border: none;
            color: #ccc;
            font-size: 24px;
            cursor: pointer;
            padding: 5px;
            transition: color 0.3s ease;
        }

        .hotspot-modal-close:hover {
            color: white;
        }

        .hotspot-modal-content {
            color: #ccc;
            line-height: 1.6;
        }

        /* Animations */
        @keyframes fadeInDown {
            from {
                opacity: 0;
                transform: translateY(-30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateX(-50%) translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateX(-50%) translateY(0);
            }
        }

        @keyframes fadeInRight {
            from {
                opacity: 0;
                transform: translateX(30px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .mobile-back-btn {
                display: block;
            }

            .mobile-whatsapp-btn {
                display: block;
            }

            .tour-controls {
                top: 10px;
                left: 70px;
                flex-direction: column;
            }

            .property-info {
                top: 10px;
                right: 10px;
                left: 10px;
                max-width: none;
                padding: 15px;
            }

            .property-title {
                font-size: 20px;
            }

            .property-specs {
                grid-template-columns: repeat(2, 1fr);
            }

            .scene-navigator {
                bottom: 10px;
                left: 10px;
                right: 10px;
                transform: none;
                justify-content: center;
                flex-wrap: wrap;
            }

            .scene-thumb {
                width: 60px;
                height: 30px;
            }

            .hotspot-modal {
                width: 95%;
                padding: 20px;
            }

            .property-actions {
                flex-direction: column;
            }
        }

        @media (max-width: 480px) {
            .control-btn {
                padding: 10px 12px;
                font-size: 12px;
            }

            .property-info {
                position: relative;
                top: auto;
                right: auto;
                left: auto;
                margin: 10px;
                animation: none;
                opacity: 1;
            }

            .scene-navigator {
                position: relative;
                bottom: auto;
                left: auto;
                right: auto;
                margin: 10px;
                animation: none;
                opacity: 1;
            }
        }

        /* Custom Hotspot Styles - Design Minimalista */
        .pnlm-hotspot-base.hotspot-info {
            background: var(--color-gold) !important;
            border: 2px solid var(--color-white) !important;
            border-radius: 50% !important;
            width: 20px !important;
            height: 20px !important;
            cursor: pointer !important;
            transition: all var(--transition-normal) !important;
            box-shadow: 0 2px 8px rgba(183, 149, 11, 0.3) !important;
        }

        .pnlm-hotspot-base.hotspot-info:hover {
            background: var(--color-gold-dark) !important;
            transform: scale(1.2) !important;
            box-shadow: 0 4px 12px rgba(183, 149, 11, 0.4) !important;
        }

        .pnlm-hotspot-base.hotspot-navigation {
            background: var(--color-black) !important;
            border: 2px solid var(--color-white) !important;
            border-radius: 20% !important;
            width: 24px !important;
            height: 24px !important;
            cursor: pointer !important;
            transition: all var(--transition-normal) !important;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3) !important;
        }

        .pnlm-hotspot-base.hotspot-navigation:hover {
            background: var(--color-gray-800) !important;
            transform: scale(1.2) !important;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4) !important;
        }

        .pnlm-hotspot-base.hotspot-highlight {
            background: #ffc107 !important;
            border: 3px solid white !important;
            border-radius: 20% !important;
            width: 22px !important;
            height: 22px !important;
            cursor: pointer !important;
            transition: all 0.3s ease !important;
            position: relative !important;
        }

        .pnlm-hotspot-base.hotspot-highlight:hover {
            background: #e0a800 !important;
            transform: scale(1.3) !important;
        }

        .pnlm-hotspot-base.hotspot-highlight::after {
            content: '⭐';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 12px;
            color: white;
            pointer-events: none;
        }

        /* Hotspot Animations */
        .pnlm-hotspot-base {
            animation: hotspot-pulse 2s infinite;
        }

        @keyframes hotspot-pulse {
            0% { box-shadow: 0 0 0 0 rgba(0, 123, 255, 0.7); }
            70% { box-shadow: 0 0 0 10px rgba(0, 123, 255, 0); }
            100% { box-shadow: 0 0 0 0 rgba(0, 123, 255, 0); }
        }

        .pnlm-hotspot-base.hotspot-navigation {
            animation: hotspot-pulse-green 2s infinite;
        }

        @keyframes hotspot-pulse-green {
            0% { box-shadow: 0 0 0 0 rgba(40, 167, 69, 0.7); }
            70% { box-shadow: 0 0 0 10px rgba(40, 167, 69, 0); }
            100% { box-shadow: 0 0 0 0 rgba(40, 167, 69, 0); }
        }

        .pnlm-hotspot-base.hotspot-highlight {
            animation: hotspot-pulse-yellow 2s infinite;
        }

        @keyframes hotspot-pulse-yellow {
            0% { box-shadow: 0 0 0 0 rgba(255, 193, 7, 0.7); }
            70% { box-shadow: 0 0 0 10px rgba(255, 193, 7, 0); }
            100% { box-shadow: 0 0 0 0 rgba(255, 193, 7, 0); }
        }
    </style>
</head>
<body>
    <div class="tour-container">
        <!-- Loading Screen -->
        <div class="loading-screen" id="loadingScreen">
            <div class="loading-logo">🏠</div>
            <h1 class="loading-title">Tour Virtual 360°</h1>
            <p class="loading-subtitle">Preparando sua experiência imersiva...</p>
            <div class="loading-spinner"></div>
            <div class="loading-progress">
                <div class="loading-progress-bar" id="loadingProgressBar"></div>
            </div>
            <div class="loading-text" id="loadingText">Carregando dados...</div>
        </div>

        <!-- Error Screen -->
        <div class="error-screen" id="errorScreen">
            <div class="error-icon">😞</div>
            <h1 class="error-title">Ops! Algo deu errado</h1>
            <p class="error-message" id="errorMessage">
                Não foi possível carregar o tour virtual. Verifique sua conexão com a internet e tente novamente.
            </p>
            <div class="error-actions">
                <button class="error-btn" onclick="retryLoad()">
                    🔄 Tentar Novamente
                </button>
                <a href="/" class="error-btn">
                    🏠 Página Inicial
                </a>
            </div>
        </div>

        <!-- Panorama Viewer -->
        <div id="panorama"></div>

        <!-- Mobile Back Button -->
        <button class="mobile-back-btn" onclick="goBack()" title="Voltar">
            <i class="fas fa-arrow-left"></i>
        </button>

        <!-- Mobile WhatsApp Button -->
        <button class="mobile-whatsapp-btn" onclick="openWhatsApp()" title="Contato WhatsApp">
            <i class="fab fa-whatsapp"></i>
        </button>

        <!-- Tour Controls -->
        <div class="tour-controls">
            <button class="control-btn" onclick="toggleFullscreen()">
                <span>🔍</span> Tela Cheia
            </button>
            <button class="control-btn" onclick="toggleAutoRotate()">
                <span>🔄</span> Auto Rotação
            </button>
            <button class="control-btn" onclick="shareTour()">
                <span>📤</span> Compartilhar
            </button>
        </div>

        <!-- Contact Minimal -->
        <div class="contact-minimal" id="contactMinimal" style="position:absolute; top:20px; right:20px; z-index:2000; background: rgba(0,0,0,0.8); color:#fff; padding:10px 14px; border-radius:10px; backdrop-filter: blur(10px); display:flex; align-items:center; gap:10px;">
            <span id="contactPhone" style="font-weight:600;"></span>
            <button class="action-btn" style="background:linear-gradient(135deg,#25D366,#128C7E);" onclick="shareOnWhatsApp()">WhatsApp</button>
        </div>

        <!-- Scene Navigator -->
        <div class="scene-navigator" id="sceneNavigator">
            <!-- Será preenchido dinamicamente -->
        </div>

        <!-- Hotspot Info Modal -->
        <div class="hotspot-modal" id="hotspotModal">
            <div class="hotspot-modal-header">
                <h3 class="hotspot-modal-title" id="hotspotModalTitle">Título do Hotspot</h3>
                <button class="hotspot-modal-close" onclick="closeHotspotModal()">×</button>
            </div>
            <div class="hotspot-modal-content" id="hotspotModalContent">
                Conteúdo do hotspot...
            </div>
        </div>
    </div>

    <!-- Pannellum JS -->
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/pannellum@2.5.6/build/pannellum.js"></script>

    <!-- Supabase -->
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>

    <script type="module">
        import { propertyManager, sceneManager, hotspotManager, utils, supabase } from '/shared/supabase-client.js';
        import { ContactForm } from '/shared/contact-form.js';
        import { SocialShare } from '/shared/social-share.js';

        let propertyId = null;
        let currentProperty = null;
        let scenes = [];
        let currentScene = null;
        let allHotspots = [];
        let viewer = null;
        let isAutoRotating = false;
        let contactForm = null;
        let socialShare = null;
        let siteConfig = null;

	        // Flags de transição suave entre cenas
	        let firstLoadDone = false;
	        let pendingZoom = false;


        // Carregar configurações do site
        async function loadSiteConfig() {
            try {
                const { data: config, error } = await supabase
                    .from('site_settings')
                    .select('*')
                    .single();

                if (error) {
                    console.warn('Erro ao carregar configurações do site:', error);
                    // Usar configurações padrão
                    siteConfig = {
                        company_name: 'ValorExpert',
                        phone_number: '+55 (11) 9999-9999',
                        whatsapp_number: '5511999999999',
                        email: 'contato@tours360.com',
                        address: 'São Paulo, SP - Brasil',
                        broker_name: 'João Silva',
                        creci_number: '123456',
                        business_hours: 'Segunda a Sexta: 8h às 18h\nSábado: 8h às 14h'
                    };
                } else {
                    siteConfig = config;
                }

                console.log('✅ Configurações do site carregadas:', siteConfig);
            } catch (error) {
                console.error('Erro ao carregar configurações:', error);
                // Fallback para configurações padrão
                siteConfig = {
                    company_name: 'ValorExpert',
                    phone_number: '+55 (11) 9999-9999',
                    whatsapp_number: '5511999999999',
                    email: 'contato@tours360.com',
                    address: 'São Paulo, SP - Brasil',
                    broker_name: 'João Silva',
                    creci_number: '123456',
                    business_hours: 'Segunda a Sexta: 8h às 18h\nSábado: 8h às 14h'
                };
            }
        }

        // Inicializar tour
        async function initTour() {
            try {
                // Obter ID da propriedade da URL
                const urlParams = new URLSearchParams(window.location.search);
                propertyId = urlParams.get('id');

                if (!propertyId) {
                    throw new Error('ID da propriedade não encontrado na URL');
                }

                updateLoadingProgress(5, 'Carregando configurações...');
                await loadSiteConfig();

                updateLoadingProgress(15, 'Carregando propriedade...');
                await loadProperty();

                updateLoadingProgress(35, 'Carregando cenas...');
                await loadScenes();

                updateLoadingProgress(55, 'Carregando hotspots...');
                await loadAllHotspots();

                updateLoadingProgress(75, 'Configurando visualizador...');
                await initViewer();

                updateLoadingProgress(90, 'Finalizando...');
                updateMetaTags();
                // property-info removido do UI
                updateSceneNavigator();
                updateContactInfo();
                // contato simplificado (whatsapp)
                initSocialShare();

                updateLoadingProgress(100, 'Pronto!');

                // Ocultar loading screen
                setTimeout(() => {
                    document.getElementById('loadingScreen').style.opacity = '0';
                    setTimeout(() => {
                        document.getElementById('loadingScreen').style.display = 'none';
                    }, 500);
                }, 1000);

            } catch (error) {
                console.error('Erro ao inicializar tour:', error);
                showError(error.message);
            }
        }

        // Carregar propriedade
        async function loadProperty() {
            const result = await propertyManager.getProperty(propertyId);

            if (!result.success) {
                throw new Error(result.error || 'Propriedade não encontrada');
            }

            currentProperty = result.data;

            // Verificar se está publicada
            if (currentProperty.status !== 'published') {
                throw new Error('Esta propriedade não está disponível publicamente');
            }
        }

        // Carregar cenas
        async function loadScenes() {
            const result = await sceneManager.getScenes(propertyId);

            if (!result.success) {
                throw new Error(result.error || 'Erro ao carregar cenas');
            }

            scenes = result.data || [];

            if (scenes.length === 0) {
                throw new Error('Nenhuma cena encontrada para esta propriedade');
            }

            // Ordenar cenas por order_index
            scenes.sort((a, b) => (a.order_index || 0) - (b.order_index || 0));

            // Definir cena atual (padrão ou primeira)
            currentScene = scenes.find(s => s.is_default) || scenes[0];
        }

        // Carregar todos os hotspots
        async function loadAllHotspots() {
            allHotspots = [];

            for (const scene of scenes) {
                const result = await hotspotManager.getHotspots(scene.id);
                if (result.success && result.data) {
                    allHotspots = allHotspots.concat(result.data);
                }
            }
        }


            // Normaliza URLs de imagens para funcionar no Vercel (evita localhost)
            function resolvePanoramaUrl(input) {
                try {
                    if (!input) return input;
                    const u = new URL(input, window.location.origin);
                    if (u.hostname === 'localhost' || u.hostname === '127.0.0.1') {
                        // Fallback de demonstração: imagens locais não existem no Vercel
                        return 'https://pannellum.org/images/alma.jpg';
                    }
                    // Se for mesma origem
                    if (u.origin === window.location.origin) {
                        // Arquivos locais como /file-*.jpg n e3o existem no Vercel: usar imagem demo
                        if (u.pathname.startsWith('/file-')) {
                            return 'https://pannellum.org/images/alma.jpg';
                        }
                        return u.pathname + u.search;
                    }
                    return u.href;
                } catch (e) {
                    if (typeof input === 'string') {
                        if (input.startsWith('./')) return input.slice(1);
                        if (!input.startsWith('/')) return '/' + input;
                    }
                    return input;
                }
            }

        // Inicializar viewer
        async function initViewer() {
            if (!currentScene || scenes.length === 0) return;

            // Criar configuração multi-cena similar ao teste
            const tourConfig = {
                default: {
                    firstScene: 'scene1', // Será ajustado no loop
                    autoLoad: true,
                    sceneFadeDuration: 1200,
                    showControls: true,
                    showFullscreenCtrl: false,
                    showZoomCtrl: true,
                    keyboardZoom: true,
                    mouseZoom: true
                },
                scenes: {}
            };

            // Adicionar todas as cenas com hotspots já configurados
            scenes.forEach((scene, index) => {
                const sceneId = `scene${index + 1}`;

                // Obter hotspots para esta cena
                const sceneHotspots = allHotspots.filter(h => h.scene_id === scene.id);

                // Converter hotspots para formato Pannellum
                const hotSpots = sceneHotspots.map(hotspot => {
                    const hotspotConfig = {
                        pitch: parseFloat(hotspot.pitch) || 0,
                        yaw: parseFloat(hotspot.yaw) || 0,
                        type: hotspot.type === 'navigation' ? 'scene' : 'info',
                        text: hotspot.title || 'Hotspot'
                    };

                    if (hotspot.type === 'navigation' && hotspot.target_scene_id) {
                        // Hotspot de navegação
                        const targetSceneIndex = scenes.findIndex(s => s.id === hotspot.target_scene_id);
                        if (targetSceneIndex !== -1) {
                            hotspotConfig.sceneId = `scene${targetSceneIndex + 1}`;
                            hotspotConfig.targetYaw = parseFloat(hotspot.target_yaw) || 0;
                            hotspotConfig.targetPitch = parseFloat(hotspot.target_pitch) || 0;
                        }
                    } else {
                        // Hotspot informativo
                        hotspotConfig.URL = `javascript:showHotspotInfo('${hotspot.title}', '${hotspot.description || 'Sem descrição'}')`;
                    }

                    return hotspotConfig;
                });

                tourConfig.scenes[sceneId] = {
                    type: 'equirectangular',
                    panorama: resolvePanoramaUrl(scene.image_url),
                    pitch: parseFloat(scene.initial_pitch) || 0,
                    yaw: parseFloat(scene.initial_yaw) || 0,
                    hfov: parseFloat(scene.initial_hfov) || 110,
                    hotSpots: hotSpots
                };

                // Mapear ID original para ID simples
                if (scene.id === currentScene.id) {
                    tourConfig.default.firstScene = sceneId;
                }
            });

            // Debug: verificar elemento e configuração
            const panoramaElement = document.getElementById('panorama');
            console.log('Elemento panorama:', panoramaElement);
            console.log('Configuração do tour:', JSON.stringify(tourConfig, null, 2));

            try {
                viewer = pannellum.viewer('panorama', tourConfig);
                console.log('Viewer criado com sucesso');

                viewer.on('load', () => {
                    console.log('✅ Cena carregada:', currentScene?.title || viewer.getScene());
                    if (!firstLoadDone) { firstLoadDone = true; return; }
                    if (pendingZoom) {
                        const tPitch = parseFloat(currentScene?.initial_pitch) || 0;
                        const tYaw = parseFloat(currentScene?.initial_yaw) || 0;
                        const tHfov = parseFloat(currentScene?.initial_hfov) || 110;
                        viewer.setHfov(Math.min(140, tHfov + 20));
                        setTimeout(() => viewer.lookAt(tPitch, tYaw, tHfov, 1000), 50);
                    }
                    pendingZoom = false;
                });

                viewer.on('scenechange', () => {
                    pendingZoom = true;
                    const currentSceneId = viewer.getScene();
                    console.log('🔄 Mudança de cena para:', currentSceneId);
                });

                viewer.on('error', (error) => {
                    console.error('❌ Erro no viewer:', error);
                    console.error('Detalhes do erro:', error.message || error);
                    throw new Error('Erro ao carregar visualizador 360°');
                });

            } catch (error) {
                console.error('❌ Erro ao criar viewer:', error);
                throw error;
            }
        }

        // Atualizar progresso de carregamento
        function updateLoadingProgress(percentage, text) {
            document.getElementById('loadingProgressBar').style.width = percentage + '%';
            document.getElementById('loadingText').textContent = text;
        }

        // Atualizar meta tags para SEO e compartilhamento
        function updateMetaTags() {
            const title = `${currentProperty.title} - Tour Virtual 360°`;
            const description = currentProperty.description ||
                `Explore ${currentProperty.title} através de um tour virtual 360° interativo.`;
            const currentUrl = window.location.href;
            const imageUrl = resolvePanoramaUrl((currentScene && currentScene.image_url) || currentProperty.thumbnail_url || '');

            // Título da página
            document.title = title;

            // Meta tags básicas
            updateOrCreateMetaTag('name', 'description', description);
            updateOrCreateMetaTag('name', 'keywords', `tour virtual, 360°, ${currentProperty.title}, imóvel, propriedade, realidade virtual`);

            // Open Graph (Facebook, WhatsApp, etc.)
            updateOrCreateMetaTag('property', 'og:title', title);
            updateOrCreateMetaTag('property', 'og:description', description);
            updateOrCreateMetaTag('property', 'og:url', currentUrl);
            updateOrCreateMetaTag('property', 'og:type', 'website');
            updateOrCreateMetaTag('property', 'og:site_name', 'Sistema de Tours Virtuais 360°');

            if (imageUrl) {
                updateOrCreateMetaTag('property', 'og:image', imageUrl);
                updateOrCreateMetaTag('property', 'og:image:width', '1200');
                updateOrCreateMetaTag('property', 'og:image:height', '630');
                updateOrCreateMetaTag('property', 'og:image:alt', `Imagem de ${currentProperty.title}`);
                updateOrCreateMetaTag('property', 'og:image:type', 'image/jpeg');
            }

            // Twitter Cards
            updateOrCreateMetaTag('name', 'twitter:card', 'summary_large_image');
            updateOrCreateMetaTag('name', 'twitter:title', title);
            updateOrCreateMetaTag('name', 'twitter:description', description);
            if (imageUrl) {
                updateOrCreateMetaTag('name', 'twitter:image', imageUrl);
            }

            // Schema.org JSON-LD
            updateStructuredData();
        }

        // Função auxiliar para criar ou atualizar meta tags
        function updateOrCreateMetaTag(attribute, name, content) {
            let meta = document.querySelector(`meta[${attribute}="${name}"]`);
            if (!meta) {
                meta = document.createElement('meta');
                meta.setAttribute(attribute, name);
                document.head.appendChild(meta);
            }
            meta.content = content;
        }

        // Atualizar dados estruturados (Schema.org)
        function updateStructuredData() {
            // Remover script existente se houver
            const existingScript = document.getElementById('structured-data');
            if (existingScript) {
                existingScript.remove();
            }

            const structuredData = {
                "@context": "https://schema.org",
                "@type": "RealEstateAgent",
                "name": currentProperty.title,
                "description": currentProperty.description || `Tour virtual 360° de ${currentProperty.title}`,
                "url": window.location.href,
                "image": (currentScene && currentScene.image_url) || currentProperty.thumbnail_url,
                "address": {
                    "@type": "PostalAddress",
                    "addressLocality": currentProperty.location || "Localização não especificada"
                },
                "offers": {
                    "@type": "Offer",
                    "availability": "https://schema.org/InStock",
                    "price": currentProperty.price || "Consulte",
                    "priceCurrency": "BRL"
                }
            };

            const script = document.createElement('script');
            script.id = 'structured-data';
            script.type = 'application/ld+json';
            script.textContent = JSON.stringify(structuredData);
            document.head.appendChild(script);
        }

        // Atualizar informações da propriedade
        function updatePropertyInfo() {
            document.getElementById('propertyTitle').textContent = currentProperty.title;
            document.getElementById('propertyDescription').textContent =
                currentProperty.description || 'Explore este tour virtual 360°';

            // Especificações
            const specs = [];

            if (currentProperty.bedrooms) {
                specs.push({
                    icon: '🛏️',
                    value: currentProperty.bedrooms,
                    label: 'Quartos'
                });
            }

            if (currentProperty.bathrooms) {
                specs.push({
                    icon: '🚿',
                    value: currentProperty.bathrooms,
                    label: 'Banheiros'
                });
            }

            if (currentProperty.area) {
                specs.push({
                    icon: '📐',
                    value: currentProperty.area + 'm²',
                    label: 'Área'
                });
            }

            if (currentProperty.price) {
                specs.push({
                    icon: '💰',
                    value: utils.formatPrice(currentProperty.price),
                    label: 'Preço'
                });
            }

            // Adicionar número de cenas
            specs.push({
                icon: '📸',
                value: scenes.length,
                label: 'Cenas'
            });

            const specsContainer = document.getElementById('propertySpecs');
            specsContainer.innerHTML = specs.map(spec => `
                <div class="spec-item">
                    <div class="spec-icon">${spec.icon}</div>
                    <div class="spec-value">${spec.value}</div>
                    <div class="spec-label">${spec.label}</div>
                </div>
            `).join('');
        }

        // Atualizar informações de contato
        function updateContactInfo() {
            if (!siteConfig) return;

            // Atualizar informações do corretor se existir elemento
            const brokerElement = document.getElementById('brokerInfo');
            if (brokerElement) {
                const brokerName = siteConfig.broker_name || 'João Silva';
                const creciNumber = siteConfig.creci_number || '123456';
                brokerElement.textContent = `${brokerName} - CRECI ${creciNumber}`;
            }

            // Atualizar horário de atendimento se existir elemento
            const businessHoursElement = document.getElementById('businessHours');
            if (businessHoursElement) {
                const businessHours = siteConfig.business_hours || 'Segunda a Sexta: 8h às 18h\nSábado: 8h às 14h';
                businessHoursElement.innerHTML = businessHours.replace(/\n/g, '<br>');
            }

            // Atualizar telefone se existir elemento
            const phoneElement = document.getElementById('contactPhone');
            if (phoneElement) {
                phoneElement.textContent = siteConfig.phone_number || '+55 (11) 9999-9999';
            }

            // Atualizar email se existir elemento
            const emailElement = document.getElementById('contactEmail');
            if (emailElement) {
                emailElement.textContent = siteConfig.email || 'contato@tours360.com';
            }

            console.log('✅ Informações de contato atualizadas no tour');
        }

        // Atualizar navegador de cenas
        function updateSceneNavigator() {
            const navigator = document.getElementById('sceneNavigator');

            if (scenes.length <= 1) {
                navigator.style.display = 'none';
                return;
            }

            navigator.innerHTML = scenes.map((scene, index) => `
                <div class="scene-thumb ${scene.id === currentScene.id ? 'active' : ''}"
                     onclick="changeScene('${scene.id}')"
                     data-scene-id="${scene.id}">
                    <img src="${resolvePanoramaUrl(scene.image_url)}" alt="${scene.title}" loading="lazy">
                    <div class="scene-thumb-label">${scene.title}</div>
                </div>
            `).join('');
        }

        // Função para mostrar informações do hotspot (chamada via JavaScript URL)
        window.showHotspotInfo = function(title, description) {
            document.getElementById('hotspotModalTitle').textContent = title;
            document.getElementById('hotspotModalContent').textContent = description;
            document.getElementById('hotspotModal').style.display = 'block';
        };

        // Mudar cena
        window.changeScene = function(sceneId) {
            const newScene = scenes.find(s => s.id === sceneId);
            if (!newScene || newScene.id === currentScene.id) return;

            currentScene = newScene;

            // Atualizar navegador
            document.querySelectorAll('.scene-thumb').forEach(thumb => {
                thumb.classList.remove('active');
            });
            document.querySelector(`[data-scene-id="${sceneId}"]`).classList.add('active');

            // Carregar nova cena (usando ID da cena no Pannellum)
            const targetIndex = scenes.findIndex(s => s.id === sceneId);
            const pannellumSceneId = targetIndex >= 0 ? `scene${targetIndex + 1}` : null;
            if (pannellumSceneId) {
                pendingZoom = true;
                viewer.loadScene(
                    pannellumSceneId,
                    newScene.initial_pitch || 0,
                    newScene.initial_yaw || 0,
                    Math.min(140, (newScene.initial_hfov || 110) + 20)
                );
            }
        };

        // Mostrar modal de hotspot
        function showHotspotModal(hotspot) {
            document.getElementById('hotspotModalTitle').textContent = hotspot.title;
            document.getElementById('hotspotModalContent').textContent =
                hotspot.description || 'Sem descrição disponível';

            document.getElementById('hotspotModal').style.display = 'block';
        }

        // Fechar modal de hotspot
        window.closeHotspotModal = function() {
            document.getElementById('hotspotModal').style.display = 'none';
        };

        // Toggle fullscreen
        window.toggleFullscreen = function() {
            if (!document.fullscreenElement) {
                document.documentElement.requestFullscreen();
            } else {
                document.exitFullscreen();
            }
        };

        // Toggle auto rotação
        window.toggleAutoRotate = function() {
            if (isAutoRotating) {
                viewer.stopAutoRotate();
                isAutoRotating = false;
            } else {
                viewer.startAutoRotate(2); // 2 graus por segundo
                isAutoRotating = true;
            }
        };

        // Compartilhar tour
        window.shareOnWhatsApp = function() {
            const whatsappNumber = siteConfig?.whatsapp_number || '5511999999999';
            const url = encodeURIComponent(window.location.href);
            const text = encodeURIComponent(`Olá! Gostaria de mais informações sobre ${currentProperty.title}. Confira o tour virtual 360°: ${window.location.href}`);
            window.open(`https://wa.me/${whatsappNumber}?text=${text}`, '_blank');
        };

        // Compartilhar tour (genérico)
        window.shareTour = function() {
            if (navigator.share) {
                navigator.share({
                    title: currentProperty.title,
                    text: `Confira este tour virtual 360° de ${currentProperty.title}!`,
                    url: window.location.href
                });
            } else {
                // Fallback: copiar URL
                navigator.clipboard.writeText(window.location.href).then(() => {
                    alert('URL copiada para a área de transferência!');
                });
            }
        };

        // Inicializar formulário de contato
        function initContactForm() {
            contactForm = new ContactForm(propertyId, {
                title: `Interesse em ${currentProperty.title}`,
                subtitle: 'Deixe seus dados e entraremos em contato',
                onSuccess: (leadData) => {
                    console.log('Lead criado:', leadData);
                    // Opcional: enviar evento para analytics
                },
                onError: (error) => {
                    console.error('Erro no formulário:', error);
                }
            });
        }

        // Inicializar compartilhamento social
        function initSocialShare() {
            const currentUrl = window.location.href;
            const title = `${currentProperty.title} - Tour Virtual 360°`;
            const description = currentProperty.description || `Explore este incrível imóvel em ${currentProperty.location || 'localização privilegiada'} através de um tour virtual 360°.`;

            socialShare = new SocialShare({
                title: title,
                description: description,
                url: currentUrl,
                image: currentProperty.thumbnail_url || '',
                hashtags: ['TourVirtual', 'Imovel', 'RealidadeVirtual', 'Propriedade'],
                onShare: (platform, url) => {
                    console.log(`Compartilhado via ${platform}:`, url);
                    // Opcional: enviar evento para analytics
                }
            });
        }

        // Mostrar formulário de contato
        window.showContactForm = function() {
            if (contactForm) {
                contactForm.show();
            }
        };

        // Mostrar modal de compartilhamento
        window.showShareModal = function() {
            if (socialShare) {
                socialShare.show();
            }
        };

        // Função para voltar
        window.goBack = function() {
            // Tentar voltar na história do navegador
            if (window.history.length > 1) {
                window.history.back();
            } else {
                // Fallback: ir para a página inicial
                window.location.href = '/index.html';
            }
        };

        // Função para abrir WhatsApp
        window.openWhatsApp = function() {
            if (!siteConfig || !currentProperty) {
                console.warn('Configurações ou propriedade não carregadas');
                return;
            }

            const whatsappNumber = siteConfig.whatsapp_number || '5511999999999';
            const propertyTitle = currentProperty.title || 'Propriedade';
            const tourUrl = window.location.href;

            const message = `Olá! Tenho interesse na propriedade "${propertyTitle}". Gostaria de mais informações. Tour virtual: ${tourUrl}`;
            const encodedMessage = encodeURIComponent(message);
            const whatsappUrl = `https://wa.me/${whatsappNumber}?text=${encodedMessage}`;

            window.open(whatsappUrl, '_blank');
        };

        // Tentar novamente
        window.retryLoad = function() {
            document.getElementById('errorScreen').style.display = 'none';
            document.getElementById('loadingScreen').style.display = 'flex';
            document.getElementById('loadingScreen').style.opacity = '1';
            initTour();
        };

        // Mostrar erro
        function showError(message) {
            document.getElementById('loadingScreen').style.display = 'none';
            document.getElementById('errorMessage').textContent = message;
            document.getElementById('errorScreen').style.display = 'flex';
        }

        // Fechar modal ao clicar fora
        document.addEventListener('click', (e) => {
            const modal = document.getElementById('hotspotModal');
            if (e.target === modal) {
                closeHotspotModal();
            }
        });

        // Fechar modal com ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                closeHotspotModal();
            }
        });

        // Inicializar quando a página carregar
        document.addEventListener('DOMContentLoaded', initTour);
    </script>
</body>
</html>

